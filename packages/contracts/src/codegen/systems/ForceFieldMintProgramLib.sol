// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ForceFieldMintProgram } from "../../ForceFieldMintProgram.sol";
import { HookContext, IProgramValidator, IEnergize, IAddFragment, IRemoveFragment, IBuild, IMine } from "@dust/world/src/ProgramHooks.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ForceFieldMintProgramType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rgtmpff1", name: "ForceFieldMintPr" }))
ForceFieldMintProgramType constant forceFieldMintProgram = ForceFieldMintProgramType.wrap(
  0x73797267746d70666631000000000000466f7263654669656c644d696e745072
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ForceFieldMintProgramLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ForceFieldMintProgramLib {
  error ForceFieldMintProgramLib_CallingFromRootSystem();

  function validateProgram(
    ForceFieldMintProgramType self,
    HookContext memory __auxArg0,
    IProgramValidator.ProgramData memory __auxArg1
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).validateProgram(__auxArg0, __auxArg1);
  }

  function setAccessGroup(ForceFieldMintProgramType self) internal {
    return CallWrapper(self.toResourceId(), address(0)).setAccessGroup();
  }

  function onAttachProgram(ForceFieldMintProgramType self, HookContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onAttachProgram(ctx);
  }

  function onDetachProgram(ForceFieldMintProgramType self, HookContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onDetachProgram(ctx);
  }

  function onEnergize(
    ForceFieldMintProgramType self,
    HookContext memory ctx,
    IEnergize.EnergizeData memory energize
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).onEnergize(ctx, energize);
  }

  function onAddFragment(
    ForceFieldMintProgramType self,
    HookContext memory ctx,
    IAddFragment.AddFragmentData memory __auxArg0
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onAddFragment(ctx, __auxArg0);
  }

  function onRemoveFragment(
    ForceFieldMintProgramType self,
    HookContext memory ctx,
    IRemoveFragment.RemoveFragmentData memory __auxArg0
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onRemoveFragment(ctx, __auxArg0);
  }

  function onBuild(
    ForceFieldMintProgramType self,
    HookContext memory ctx,
    IBuild.BuildData memory __auxArg0
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onBuild(ctx, __auxArg0);
  }

  function onMine(
    ForceFieldMintProgramType self,
    HookContext memory ctx,
    IMine.MineData memory __auxArg0
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onMine(ctx, __auxArg0);
  }

  function _msgSender(ForceFieldMintProgramType self) internal view returns (address __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgSender();
  }

  function _msgValue(ForceFieldMintProgramType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgValue();
  }

  function validateProgram(
    CallWrapper memory self,
    HookContext memory __auxArg0,
    IProgramValidator.ProgramData memory __auxArg1
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _validateProgram_HookContext_IProgramValidator_ProgramData.validateProgram,
      (__auxArg0, __auxArg1)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function setAccessGroup(CallWrapper memory self) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setAccessGroup.setAccessGroup, ());
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onAttachProgram(CallWrapper memory self, HookContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onDetachProgram(CallWrapper memory self, HookContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onEnergize(
    CallWrapper memory self,
    HookContext memory ctx,
    IEnergize.EnergizeData memory energize
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _onEnergize_HookContext_IEnergize_EnergizeData.onEnergize,
      (ctx, energize)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onAddFragment(
    CallWrapper memory self,
    HookContext memory ctx,
    IAddFragment.AddFragmentData memory __auxArg0
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _onAddFragment_HookContext_IAddFragment_AddFragmentData.onAddFragment,
      (ctx, __auxArg0)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onRemoveFragment(
    CallWrapper memory self,
    HookContext memory ctx,
    IRemoveFragment.RemoveFragmentData memory __auxArg0
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _onRemoveFragment_HookContext_IRemoveFragment_RemoveFragmentData.onRemoveFragment,
      (ctx, __auxArg0)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onBuild(CallWrapper memory self, HookContext memory ctx, IBuild.BuildData memory __auxArg0) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onBuild_HookContext_IBuild_BuildData.onBuild, (ctx, __auxArg0));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onMine(CallWrapper memory self, HookContext memory ctx, IMine.MineData memory __auxArg0) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onMine_HookContext_IMine_MineData.onMine, (ctx, __auxArg0));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function _msgSender(CallWrapper memory self) internal view returns (address __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldMintProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function validateProgram(
    RootCallWrapper memory self,
    HookContext memory __auxArg0,
    IProgramValidator.ProgramData memory __auxArg1
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _validateProgram_HookContext_IProgramValidator_ProgramData.validateProgram,
      (__auxArg0, __auxArg1)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function setAccessGroup(RootCallWrapper memory self) internal {
    bytes memory systemCall = abi.encodeCall(_setAccessGroup.setAccessGroup, ());
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onAttachProgram(RootCallWrapper memory self, HookContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onDetachProgram(RootCallWrapper memory self, HookContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onEnergize(
    RootCallWrapper memory self,
    HookContext memory ctx,
    IEnergize.EnergizeData memory energize
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _onEnergize_HookContext_IEnergize_EnergizeData.onEnergize,
      (ctx, energize)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onAddFragment(
    RootCallWrapper memory self,
    HookContext memory ctx,
    IAddFragment.AddFragmentData memory __auxArg0
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _onAddFragment_HookContext_IAddFragment_AddFragmentData.onAddFragment,
      (ctx, __auxArg0)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onRemoveFragment(
    RootCallWrapper memory self,
    HookContext memory ctx,
    IRemoveFragment.RemoveFragmentData memory __auxArg0
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _onRemoveFragment_HookContext_IRemoveFragment_RemoveFragmentData.onRemoveFragment,
      (ctx, __auxArg0)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onBuild(
    RootCallWrapper memory self,
    HookContext memory ctx,
    IBuild.BuildData memory __auxArg0
  ) internal view {
    bytes memory systemCall = abi.encodeCall(_onBuild_HookContext_IBuild_BuildData.onBuild, (ctx, __auxArg0));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onMine(RootCallWrapper memory self, HookContext memory ctx, IMine.MineData memory __auxArg0) internal view {
    bytes memory systemCall = abi.encodeCall(_onMine_HookContext_IMine_MineData.onMine, (ctx, __auxArg0));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function _msgSender(RootCallWrapper memory self) internal view returns (address __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(RootCallWrapper memory self) internal view returns (uint256 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function callFrom(ForceFieldMintProgramType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ForceFieldMintProgramType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ForceFieldMintProgramType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ForceFieldMintProgramType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ForceFieldMintProgramType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ForceFieldMintProgramType) {
    return ForceFieldMintProgramType.wrap(resourceId.unwrap());
  }

  function getAddress(ForceFieldMintProgramType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _validateProgram_HookContext_IProgramValidator_ProgramData {
  function validateProgram(HookContext memory __auxArg0, IProgramValidator.ProgramData memory __auxArg1) external;
}

interface _setAccessGroup {
  function setAccessGroup() external;
}

interface _onAttachProgram_HookContext {
  function onAttachProgram(HookContext memory ctx) external;
}

interface _onDetachProgram_HookContext {
  function onDetachProgram(HookContext memory ctx) external;
}

interface _onEnergize_HookContext_IEnergize_EnergizeData {
  function onEnergize(HookContext memory ctx, IEnergize.EnergizeData memory energize) external;
}

interface _onAddFragment_HookContext_IAddFragment_AddFragmentData {
  function onAddFragment(HookContext memory ctx, IAddFragment.AddFragmentData memory __auxArg0) external;
}

interface _onRemoveFragment_HookContext_IRemoveFragment_RemoveFragmentData {
  function onRemoveFragment(HookContext memory ctx, IRemoveFragment.RemoveFragmentData memory __auxArg0) external;
}

interface _onBuild_HookContext_IBuild_BuildData {
  function onBuild(HookContext memory ctx, IBuild.BuildData memory __auxArg0) external;
}

interface _onMine_HookContext_IMine_MineData {
  function onMine(HookContext memory ctx, IMine.MineData memory __auxArg0) external;
}

interface __msgSender {
  function _msgSender() external;
}

interface __msgValue {
  function _msgValue() external;
}

using ForceFieldMintProgramLib for ForceFieldMintProgramType global;
using ForceFieldMintProgramLib for CallWrapper global;
using ForceFieldMintProgramLib for RootCallWrapper global;
